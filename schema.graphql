type AaveProxy_LiquidationCall {
  id: ID!
  chainId: Int!
  timestamp: BigInt!
  collateralAsset: String!
  debtAsset: String!
  user: String!
  debtToCover: BigInt!
  liquidatedCollateralAmount: BigInt!
  liquidator: String!
  receiveAToken: Boolean!
}

type EulerFactory_ProxyCreated {
  id: ID!
  chainId: Int!
  timestamp: BigInt!
  proxy: String!
  upgradeable: Boolean!
  implementation: String!
  trailingData: String!
}

type EulerVaultProxy_Liquidate {
  id: ID!
  chainId: Int!
  timestamp: BigInt!
  liquidator: String!
  violator: String!
  collateral: String!
  repayAssets: BigInt!
  yieldBalance: BigInt!
}

type Morpho_Liquidate {
  id: ID!
  chainId: Int!
  timestamp: BigInt!
  id_bytes32: String!
  caller: String!
  borrower: String!
  repaidAssets: BigInt!
  repaidShares: BigInt!
  seizedAssets: BigInt!
  badDebtAssets: BigInt!
  badDebtShares: BigInt!
}

type GeneralizedLiquidation {
  id: ID!
  chainId: Int!
  timestamp: BigInt!
  protocol: String!
  borrower: String!
  liquidator: String!
  collateralAsset: String
  debtAsset: String
  repaidAssets: BigInt
  seizedAssets: BigInt
}

type LiquidationStats {
  id: ID!
  chainId: Int
  aaveCount: BigInt!
  eulerCount: BigInt!
  morphoCount: BigInt!
  totalCount: BigInt!
}
